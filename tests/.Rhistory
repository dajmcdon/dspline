table(pvals)
table(orbits)
unique(orbits)
?unique
u = unique(orbits)
class(u)
dim(u)
length(u)
u[[1]]
n = 5
perms = list(1:n, c(n,1:(n-1)))
R = 100000
pvals = numeric(R)
orbits = list(R)
for (r in 1:R) {
Z = sample(n, n, replace = TRUE)
orbits[[r]] = lapply(perms, function(perm) Z[perm])
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
length(unique(orbits))
rlist
rlist::table.list
install.packages("rlist")
rlist::table.list(orbits)
rlist::list.table(orbits)
rlist::list.table(orbits)
for (r in 1:R) {
Z = sample(n, n, replace = TRUE)
orbits[[r]] = sapply(perms, function(perm) Z[perm])
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
rlist::list.table(orbits)
n = 5
perms = list(1:n, c(n,1:(n-1)))
R = 100000
pvals = numeric(R)
orbits = matrix(0, nrow=R, ncol=length(perms)*n)
for (r in 1:R) {
Z = sample(n, n, replace = TRUE)
orbits[r,] = unlist(sapply(perms, function(perm) Z[perm]))
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
n = 5
perms = list(1:n, c(n,1:(n-1)))
R = 100000
pvals = numeric(R)
orbits = matrix(0, nrow=R, ncol=length(perms)*n)
for (r in 1:R) {
Z = rnorm(n) #sample(n, n, replace = TRUE)
orbits[r,] = unlist(sapply(perms, function(perm) Z[perm]))
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
n = 5
perms = list(1:n, c(n,1:(n-1)))
R = 100000
pvals = numeric(R)
orbits = matrix(0, nrow=R, ncol=length(perms)*n)
for (r in 1:R) {
Z = sample(n, n, replace = TRUE)
orbits[r,] = unlist(sapply(perms, function(perm) Z[perm]))
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
# Permutation p-value (assumes first element of perms is the identity)
pval = function(Z, perms, stat) {
B = length(perms)
stats = numeric(B)
for (b in 1:B) stats[b] = stat(Z[perms[[b]]])
mean(stats[1] > stats)
}
n = 5
perms = list(1:n, c(n,1:(n-1)))
R = 100000
pvals = numeric(R)
orbits = matrix(0, nrow=R, ncol=length(perms)*n)
for (r in 1:R) {
Z = sample(n, n, replace = TRUE)
orbits[r,] = unlist(sapply(perms, function(perm) Z[perm]))
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
n = 5
perms = list(1:n, c(n,1:(n-1)))
R = 100000
pvals = numeric(R)
orbits = matrix(0, nrow=R, ncol=length(perms)*n)
for (r in 1:R) {
Z = sample(n, n, replace = TRUE)
orbits[r,] = unlist(sapply(perms, function(perm) Z[perm]))
pvals[r] = pval(Z, perms, stat)
}
table(pvals)
2^10
orbits2 = apply(orbits, 2, function(x) sum(x * 10^(1:length(x)-1)))
orbits2[1]
orbits[,1]
orbits2 = apply(orbits, 1, function(x) sum(x * 10^(1:length(x)-1)))
orbits2[1]
orbits[1,]
orbits2 = apply(orbits, 1, function(x) sum(x * 10^((length(x)-1):0)))
orbits2 = apply(orbits, 1, function(x) sum(x * 10^((length(x)-1):0)))
orbits2[1]
orbits2[1,]
orbits2[1]
orbits[1,]
table(orbits2)
which.max(table(orbits2))
as.integer(names(which.max(table(orbits2))))
table(pvals[orbits2 == i])
i = as.integer(names(which.max(table(orbits2))))
table(pvals[orbits2 == i])
length(table(orbits2))
# Now do the conditioning
library(dplyr)
tibble(pval = pvals, orbit = orbits2) %>%
group_by(orbit) %>%
summarize(mean(pval == 0))
tibble(pval = pvals, orbit = orbits2) %>%
group_by(orbit) %>%
summarize(pval_by_orbit = mean(pval == 0)) %>%
pull(unique(pval_by_orbit))
tibble(pval = pvals, orbit = orbits2) %>%
group_by(orbit) %>%
summarize(pval_by_orbit = mean(pval == 0)) %>%
pull(unique(pval_by_orbit))
tibble(pval = pvals, orbit = orbits2) %>%
group_by(orbit) %>%
summarize(pval_by_orbit = mean(pval == 0)) %>%
ungroup() %>%
pull(unique(pval_by_orbit))
tibble(pval = pvals, orbit = orbits2) %>%
group_by(orbit) %>%
summarize(pval_by_orbit = mean(pval == 0)) %>%
ungroup() %>%
summarize(unique(pval_by_orbit))
library(covidcast)
library(epiprocess)
library(dplyr)
x <- covidcast_signal(data_source = "jhu-csse",
signal = "confirmed_incidence_num",
start_day = "2020-06-01",
end_day = "2021-05-31",
geo_type = "state",
geo_values = "fl")  %>%
as.epi_df() %>%
rename(cases = value) %>%
select(geo_value, time_value, cases) %>%
epi_slide(cases = mean(cases), n = 7)
?epi_slide
x <- epi_slide(x, pct_change = pct_change(cases), n = 14, align = "center",
complete = TRUE)
head(x, 21) %>% print(n = Inf)
library(ggplot2)
theme_set(theme_bw())
threshold_upper = 10
threshold_lower = -10
p1 <- ggplot(x, aes(x = time_value, y = cases)) +
geom_tile(data = x %>% filter(pct_change >= threshold_upper),
aes(x = time_value, y = 0, width = 7, height = Inf),
fill = 2, alpha = 0.1) +
geom_tile(data = x %>% filter(pct_change <= threshold_lower),
aes(x = time_value, y = 0, width = 7, height = Inf),
fill = 4, alpha = 0.1) +
geom_line() +
scale_x_date(minor_breaks = "month", date_labels = "%b %y") +
labs(x = "Date", y = "Reported COVID-19 cases")
p2 <- ggplot(x, aes(x = time_value, y = pct_change)) +
geom_line() +
geom_hline(yintercept = threshold_upper, linetype = 2, col = 2) +
geom_hline(yintercept = threshold_lower, linetype = 2, col = 4) +
scale_x_date(minor_breaks = "month", date_labels = "%b %y") +
labs(x = "Date", y = "Weekly percentage change")
gridExtra::grid.arrange(p1, p2, nrow = 1)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
devtools::load_all()
source("funs.R")
devtools::load_all()
source("funs.R")
f = function(x) sin(x)
xd = sort(runif(10))
k = 2
x = c(0, 0.5, 0.7, 1.1)
f1 = sapply(xd, f)
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
H = getH(n, k-1, xd)
f3 = (H %*% (c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)]) * Df))
max(abs(f2 - f3))
devtools::load_all()
f = function(x) sin(x)
xd = sort(runif(10))
k = 2
x = c(0, 0.5, 0.7, 1.1)
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)]) * Df))
max(abs(f2 - f3))
max(abs(f1 - f3))
abs(Df - getB(n, k, xd) %*% f1)
discrete_deriv(f, k, xd, x[2])
(getB(n, k, xd) %*% f1)[2]
Df[2]
Df[3]
discrete_deriv(f, k, xd, x[3])
discrete_deriv(f, k, xd, xd[2])
(getB(n, k, xd) %*% f1)[2]
1.96-0.98
(getB(n, k, xd) %*% f1)[2]/2
discrete_deriv(f, k, xd, xd[2])/2
(f(xd[2])-f(xd[1]))/(xd[2]-xd[1])
k
devtools::load_all()
source("funs.R")
f = function(x) sin(x)
xd = sort(runif(10))
k = 2
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)]) * Df))
max(abs(f2 - f3))
max(abs(f1 - f3))
abs(Df - getB(n, k, xd) %*% f1)
discrete_deriv(f, k, xd, xd[2])
(getB(n, k, xd) %*% f1)[2]
abs(Df - getB(n, k, xd) %*% f1)
max(abs(Df - getB(n, k, xd) %*% f1))
f = function(x) sin(x)
xd = sort(runif(10))
k = 3
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)]) * Df))
max(abs(f2 - f3))
max(abs(f1 - f3))
max(abs(Df - getB(n, k, xd) %*% f1))
f = function(x) sin(x)
xd = sort(runif(10))
k = 3
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
f = function(x) sin(x)
xd = sort(runif(10))
k = 2
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
f = function(x) sin(x)
xd = sort(runif(10))
k = 1
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
f = function(x) sin(x)
xd = sort(runif(10))
k = 4
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
max(abs(Df - getB(n, k, xd) %*% f1))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
k = 2
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)]) * Df))
max(abs(f2 - f3))
max(abs(f1 - f3))
max(abs(Df - getB(n, k, xd) %*% f1))
HH = matrix(0,n,n)
for (i in 1:n) {
for (j in 1:n) {
HH[i,j] = rcpp_hj_fun(k-1, xd, j-1, xd[i])
}
}
max(abs(H-HH))
f1 = sapply(xd, f)
max(abs(discrete_deriv(c(f1, f1), k, xd, xd) - getB(n, k, xd) %*% f1))
f1 = sapply(xd, f)
max(abs(discrete_deriv(f, k, xd, xd) - getB(n, k, xd) %*% f1))
devtools::load_all()
source("funs.R")
k = 2
xd = sort(runif(10))
H1 = getH(length(xd), k, xd)
H2 = matrix(0,n,n)
for (i in 1:n) {
for (j in 1:n) {
H2[i,j] = rcpp_hj_fun(k, xd, j-1, xd[i])
}
}
max(abs(H-H2))
max(abs(H1-H2))
H1
c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)])
length(c(rep(1,k), xd[(k+1):n] - xd[1:(n-k)]))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (Df * c(rep(1,k), (xd[(k+1):n] - xd[1:(n-k)])/k)))
max(abs(f2 - f3))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (Df * c(rep(1,k), (xd[(k+1):n] - xd[1:(n-k)])/k)))
max(abs(f2 - f3))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (Df * c(rep(1,k), (xd[(k+1):n] - xd[1:(n-k)])/k)))
max(abs(f2 - f3))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (Df * c(rep(1,k), (xd[(k+1):n] - xd[1:(n-k)])/k)))
max(abs(f2 - f3))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (Df * c(rep(1,k), (xd[(k+1):n] - xd[1:(n-k)])/k)))
max(abs(f2 - f3))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
n = length(xd)
H = getH(n, k-1, xd)
f3 = (H %*% (Df * c(rep(1,k), (xd[(k+1):n] - xd[1:(n-k)])/k)))
max(abs(f2 - f3))
k = 2
f = function(x) sin(x)
xd = sort(runif(10))
f1 = sapply(xd, f)
Df = discrete_deriv(c(f1, f1), k, xd, xd)
f2 = discrete_integ(c(Df, Df), k, xd, xd)
max(abs(f1 - f2))
devtools::load_all()
source("funs.R")
n = 10
k = 2
xd = sort(runif(n))
H1 = getH(n, k, xd)
H2 = matrix(0,n,n)
for (i in 1:n) {
for (j in 1:n) {
H2[i,j] = rcpp_hj_fun(k, xd, j-1, xd[i])
}
}
max(abs(H1-H2))
m
n
n = 10
k = 2
f = function(x) sin(x)
xd = sort(runif(n))
x = c(xd, 1.1)
f1 = sapply(x, f)
Df = discrete_deriv(c(f1[1:n], f1), k, xd, xd)
f2 = discrete_integ(c(Df[1:n], Df), k, xd, xd)
max(abs(f1 - f2))
f1
f2
n = 10
k = 2
f = function(x) sin(x)
xd = sort(runif(n))
x = c(xd, 1.1)
f1 = sapply(x, f)
Df = discrete_deriv(c(f1[1:n], f1), k, xd, x)
f2 = discrete_integ(c(Df[1:n], Df), k, xd, x)
max(abs(f1 - f2))
getwd()
plot(1:5)
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
source("funs.R")
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
Seq = function(a,b) {
if (a<=b) return(a:b)
else return(integer(0))
}
source("funs.R")
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
max(abs(N1 - N2))
N1
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
max(abs(N1 - N2))
N1
N2
knot_idx
devtools::load_all()
source("funs.R")
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
knot_idx
N1
N2
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N1
source("funs.R")
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
max(abs(N1 - N2))
N1
N2
n = 10
k = 2
knot_idx = sort(sample((k+1):(n-1), 4))
xd = sort(runif(n))
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
max(abs(N1 - N2))
N1
N2
N1 = n_mat(k, xd, knot_idx = knot_idx)[,1:(k+1)]
source("funs.R")
N2 = dbs.evals.sk(k, xd, knot_idx)[,1:(k+1)]
row.ind - (k+1)
I1
B1
-as.numeric(B2 %*% y[I2])
y[I2]
B2
knitr::opts_chunk$set(echo = TRUE)
